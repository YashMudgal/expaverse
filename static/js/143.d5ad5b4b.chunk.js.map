{"version":3,"sources":["components/_dashboard/jobprofile/AccountBillingAddressBook.js","components/_dashboard/jobprofile/AccountBillingPaymentMethod.js","components/_dashboard/jobprofile/AccountBillingInvoiceHistory.js","components/_dashboard/jobprofile/AccountBilling.js","components/_dashboard/jobprofile/AccountChangePassword.js","components/_dashboard/jobprofile/AccountGeneral.js","components/_dashboard/jobprofile/AccountNotifications.js","components/_dashboard/jobprofile/AccountSocialLinks.js","pages/dashboard/JobProfile.js"],"names":["AccountBillingAddressBook","addressBook","Card","sx","p","Stack","spacing","alignItems","Typography","variant","color","map","address","Paper","width","bgcolor","gutterBottom","name","component","street","city","state","country","zipCode","phone","Box","mt","Button","size","startIcon","icon","trash2Fill","onClick","mr","editFill","id","plusFill","AccountBillingPaymentMethod","formik","cards","isOpen","onOpen","onCancel","errors","touched","isSubmitting","handleSubmit","getFieldProps","mb","display","direction","xs","md","card","position","border","theme","palette","grey","alt","src","cardType","cardNumber","IconButton","top","right","moreVerticalFill","height","Collapse","in","padding","marginTop","borderRadius","value","noValidate","autoComplete","onSubmit","sm","TextField","fullWidth","label","error","Boolean","cardName","helperText","placeholder","cardExpired","cardCvv","justifyContent","type","LoadingButton","loading","AccountBillingInvoiceHistory","invoices","invoice","minWidth","fDate","createdAt","fCurrency","price","Link","RouterLink","to","endIcon","arrowIosForwardFill","AccountBilling","useSelector","user","useState","open","setOpen","enqueueSnackbar","useSnackbar","NewCardSchema","Yup","shape","required","useFormik","initialValues","validationSchema","values","a","setSubmitting","resetForm","fakeRequest","handleCancel","alert","JSON","stringify","Grid","container","item","prevOpen","AccountChangePassword","ChangePassWordSchema","oldPassword","newPassword","min","confirmNewPassword","oneOf","AccountGeneral","isMountedRef","useIsMountedRef","useAuth","updateProfile","UpdateUserSchema","displayName","enableReinitialize","email","photoURL","phoneNumber","CGPA","about","isPublic","setErrors","current","afterSubmit","code","setFieldValue","handleDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","py","px","textAlign","accept","maxSize","onDrop","caption","mx","fData","FormHelperText","FormControlLabel","control","Switch","labelPlacement","disabled","select","SelectProps","native","countries","option","multiline","minRows","maxRows","ACTIVITY_OPTIONS","APPLICATION_OPTIONS","AccountNotifications","notifications","activityComments","activityAnswers","activityFollows","applicationNews","applicationProduct","applicationBlog","activity","checked","SOCIAL_LINKS_OPTIONS","facebookFill","instagramFilled","linkedinFill","twitterFill","AccountSocialLinks","myProfile","facebookLink","instagramLink","linkedinLink","twitterLink","link","InputProps","startAdornment","InputAdornment","UserAccount","themeStretch","useSettings","currentTab","setCurrentTab","dispatch","useDispatch","useEffect","getCards","getAddressBook","getInvoices","getNotifications","getProfile","ACCOUNT_TABS","roundAccountBox","roundReceipt","bellFill","shareFill","roundVpnKey","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","root","jobList","Tabs","scrollButtons","allowScrollButtonsMobile","onChange","event","newValue","tab","Tab","disableRipple","capitalCase"],"mappings":"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","file":"static/js/143.d5ad5b4b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Fill from '@iconify/icons-eva/trash-2-fill';\n// material\nimport { Box, Card, Button, Typography, Stack, Paper } from '@material-ui/core';\n\n// ----------------------------------------------------------------------\n\nAccountBillingAddressBook.propTypes = {\n  addressBook: PropTypes.array\n};\n\nexport default function AccountBillingAddressBook({ addressBook }) {\n  return (\n    <Card sx={{ p: 3 }}>\n      <Stack spacing={3} alignItems=\"flex-start\">\n        <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\n          Billing Info\n        </Typography>\n\n        {addressBook.map((address) => (\n          <Paper\n            key={address.id}\n            sx={{\n              p: 3,\n              width: 1,\n              bgcolor: 'background.neutral'\n            }}\n          >\n            <Typography variant=\"subtitle1\" gutterBottom>\n              {address.name}\n            </Typography>\n\n            <Typography variant=\"body2\" gutterBottom>\n              <Typography variant=\"body2\" component=\"span\" sx={{ color: 'text.secondary' }}>\n                Address: &nbsp;\n              </Typography>\n              {`${address.street}, ${address.city}, ${address.state}, ${address.country} ${address.zipCode}`}\n            </Typography>\n\n            <Typography variant=\"body2\" gutterBottom>\n              <Typography variant=\"body2\" component=\"span\" sx={{ color: 'text.secondary' }}>\n                Phone: &nbsp;\n              </Typography>\n              {address.phone}\n            </Typography>\n\n            <Box sx={{ mt: 1 }}>\n              <Button\n                color=\"error\"\n                size=\"small\"\n                startIcon={<Icon icon={trash2Fill} />}\n                onClick={() => {}}\n                sx={{ mr: 1 }}\n              >\n                Delete\n              </Button>\n              <Button size=\"small\" startIcon={<Icon icon={editFill} />} onClick={() => {}}>\n                Edit\n              </Button>\n            </Box>\n          </Paper>\n        ))}\n\n        <Button size=\"small\" startIcon={<Icon icon={plusFill} />}>\n          Add new address\n        </Button>\n      </Stack>\n    </Card>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { Form, FormikProvider } from 'formik';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\n// material\nimport { Box, Paper, Stack, Card, Button, Collapse, TextField, IconButton, Typography } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n\n// ----------------------------------------------------------------------\n\nAccountBillingPaymentMethod.propTypes = {\n  formik: PropTypes.object,\n  cards: PropTypes.array,\n  isOpen: PropTypes.bool,\n  onOpen: PropTypes.func,\n  onCancel: PropTypes.func\n};\n\nexport default function AccountBillingPaymentMethod({ formik, cards, isOpen, onOpen, onCancel }) {\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <Typography variant=\"overline\" sx={{ mb: 3, display: 'block', color: 'text.secondary' }}>\n        Payment Method\n      </Typography>\n\n      <Stack spacing={2} direction={{ xs: 'column', md: 'row' }}>\n        {cards.map((card) => (\n          <Paper\n            key={card.id}\n            sx={{\n              p: 3,\n              width: 1,\n              position: 'relative',\n              border: (theme) => `solid 1px ${theme.palette.grey[500_32]}`\n            }}\n          >\n            <Box\n              component=\"img\"\n              alt=\"icon\"\n              src={card.cardType === 'master_card' ? '/static/icons/ic_mastercard.svg' : '/static/icons/ic_visa.svg'}\n              sx={{ mb: 1 }}\n            />\n            <Typography variant=\"subtitle2\">{card.cardNumber}</Typography>\n            <IconButton\n              sx={{\n                top: 8,\n                right: 8,\n                position: 'absolute'\n              }}\n            >\n              <Icon icon={moreVerticalFill} width={20} height={20} />\n            </IconButton>\n          </Paper>\n        ))}\n      </Stack>\n\n      <Box sx={{ mt: 3 }}>\n        <Button size=\"small\" startIcon={<Icon icon={plusFill} />} onClick={onOpen}>\n          Add new card\n        </Button>\n      </Box>\n\n      <Collapse in={isOpen}>\n        <Box\n          sx={{\n            padding: 3,\n            marginTop: 3,\n            borderRadius: 1,\n            bgcolor: 'background.neutral'\n          }}\n        >\n          <FormikProvider value={formik}>\n            <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Stack spacing={3}>\n                <Typography variant=\"subtitle1\">Add new card</Typography>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n                  <TextField\n                    fullWidth\n                    label=\"Name on card\"\n                    {...getFieldProps('cardName')}\n                    error={Boolean(touched.cardName && errors.cardName)}\n                    helperText={touched.cardName && errors.cardName}\n                  />\n\n                  <TextField\n                    fullWidth\n                    label=\"Card number\"\n                    {...getFieldProps('cardNumber')}\n                    error={Boolean(touched.cardNumber && errors.cardNumber)}\n                    helperText={touched.cardNumber && errors.cardNumber}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n                  <TextField\n                    fullWidth\n                    label=\"Expiration date\"\n                    placeholder=\"MM/YY\"\n                    {...getFieldProps('cardExpired')}\n                    error={Boolean(touched.cardExpired && errors.cardExpired)}\n                    helperText={touched.cardExpired && errors.cardExpired}\n                  />\n\n                  <TextField\n                    fullWidth\n                    label=\"Cvv\"\n                    {...getFieldProps('cardCvv')}\n                    error={Boolean(touched.cardCvv && errors.cardCvv)}\n                    helperText={touched.cardCvv && errors.cardCvv}\n                  />\n                </Stack>\n\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1.5}>\n                  <Button type=\"button\" color=\"inherit\" variant=\"outlined\" onClick={onCancel}>\n                    Cancel\n                  </Button>\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                    Save Change\n                  </LoadingButton>\n                </Stack>\n              </Stack>\n            </Form>\n          </FormikProvider>\n        </Box>\n      </Collapse>\n    </Card>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\n// material\nimport { Link, Stack, Button, Typography } from '@material-ui/core';\n// utils\nimport { fDate } from '../../../utils/formatTime';\nimport { fCurrency } from '../../../utils/formatNumber';\n\n// ----------------------------------------------------------------------\n\nAccountBillingInvoiceHistory.propTypes = {\n  invoices: PropTypes.array\n};\n\nexport default function AccountBillingInvoiceHistory({ invoices }) {\n  return (\n    <Stack spacing={3} alignItems=\"flex-end\">\n      <Typography variant=\"subtitle1\" sx={{ width: 1 }}>\n        Invoice History\n      </Typography>\n\n      <Stack spacing={2} sx={{ width: 1 }}>\n        {invoices.map((invoice) => (\n          <Stack key={invoice.id} direction=\"row\" justifyContent=\"space-between\" sx={{ width: 1 }}>\n            <Typography variant=\"body2\" sx={{ minWidth: 160 }}>\n              {fDate(invoice.createdAt)}\n            </Typography>\n            <Typography variant=\"body2\">{fCurrency(invoice.price)}</Typography>\n            <Link component={RouterLink} to=\"#\">\n              PDF\n            </Link>\n          </Stack>\n        ))}\n      </Stack>\n\n      <Button size=\"small\" endIcon={<Icon icon={arrowIosForwardFill} />}>\n        All invoices\n      </Button>\n    </Stack>\n  );\n}\n","import * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack5';\n// material\nimport { Box, Grid, Card, Button, Typography, Stack } from '@material-ui/core';\n// redux\nimport { useSelector } from '../../../redux/store';\n// utils\nimport fakeRequest from '../../../utils/fakeRequest';\n//\nimport AccountBillingAddressBook from './AccountBillingAddressBook';\nimport AccountBillingPaymentMethod from './AccountBillingPaymentMethod';\nimport AccountBillingInvoiceHistory from './AccountBillingInvoiceHistory';\n\n// ----------------------------------------------------------------------\n\nexport default function AccountBilling() {\n  const { cards, invoices, addressBook } = useSelector((state) => state.user);\n  const [open, setOpen] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const NewCardSchema = Yup.object().shape({\n    cardName: Yup.string().required('Name is required'),\n    cardNumber: Yup.string().required('Card number is required'),\n    cardExpired: Yup.string().required('Card expired is required'),\n    cardCvv: Yup.string().required('Cvv is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      cardName: '',\n      cardNumber: '',\n      cardExpired: '',\n      cardCvv: ''\n    },\n    validationSchema: NewCardSchema,\n    onSubmit: async (values, { setSubmitting, resetForm }) => {\n      await fakeRequest(500);\n      handleCancel();\n      resetForm();\n      setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n      enqueueSnackbar('Add card success', { variant: 'success' });\n    }\n  });\n\n  const handleOpenAddCard = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    formik.resetForm();\n  };\n\n  return (\n    <Grid container spacing={5}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Card sx={{ p: 3 }}>\n            <Typography variant=\"overline\" sx={{ mb: 3, display: 'block', color: 'text.secondary' }}>\n              Your Plan\n            </Typography>\n            <Typography variant=\"h4\">Premium</Typography>\n            <Box\n              sx={{\n                mt: { xs: 2, sm: 0 },\n                position: { sm: 'absolute' },\n                top: { sm: 24 },\n                right: { sm: 24 }\n              }}\n            >\n              <Button size=\"small\" color=\"inherit\" variant=\"outlined\" sx={{ mr: 1 }}>\n                Cancel plan\n              </Button>\n              <Button size=\"small\" variant=\"outlined\">\n                Upgrade plan\n              </Button>\n            </Box>\n          </Card>\n\n          <AccountBillingPaymentMethod\n            cards={cards}\n            formik={formik}\n            isOpen={open}\n            onOpen={handleOpenAddCard}\n            onCancel={handleCancel}\n          />\n\n          <AccountBillingAddressBook addressBook={addressBook} />\n        </Stack>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <AccountBillingInvoiceHistory invoices={invoices} />\n      </Grid>\n    </Grid>\n  );\n}\n","import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack5';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// material\nimport { Stack, Card, TextField } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// utils\nimport fakeRequest from '../../../utils/fakeRequest';\n\n// ----------------------------------------------------------------------\n\nexport default function AccountChangePassword() {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const ChangePassWordSchema = Yup.object().shape({\n    oldPassword: Yup.string().required('Old Password is required'),\n    newPassword: Yup.string().min(6, 'Password must be at least 6 characters').required('New Password is required'),\n    confirmNewPassword: Yup.string().oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      oldPassword: '',\n      newPassword: '',\n      confirmNewPassword: ''\n    },\n    validationSchema: ChangePassWordSchema,\n    onSubmit: async (values, { setSubmitting }) => {\n      await fakeRequest(500);\n      setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n      enqueueSnackbar('Save success', { variant: 'success' });\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={3} alignItems=\"flex-end\">\n            <TextField\n              {...getFieldProps('oldPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"Old Password\"\n              error={Boolean(touched.oldPassword && errors.oldPassword)}\n              helperText={touched.oldPassword && errors.oldPassword}\n            />\n\n            <TextField\n              {...getFieldProps('newPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"New Password\"\n              error={Boolean(touched.newPassword && errors.newPassword)}\n              helperText={(touched.newPassword && errors.newPassword) || 'Password must be minimum 6+'}\n            />\n\n            <TextField\n              {...getFieldProps('confirmNewPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"Confirm New Password\"\n              error={Boolean(touched.confirmNewPassword && errors.confirmNewPassword)}\n              helperText={touched.confirmNewPassword && errors.confirmNewPassword}\n            />\n\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Save Changes\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Card>\n  );\n}\n","import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack5';\nimport { useCallback } from 'react';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport {\n  Box,\n  Grid,\n  Card,\n  Stack,\n  Switch,\n  TextField,\n  FormControlLabel,\n  Typography,\n  FormHelperText\n} from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\nimport { UploadAvatar } from '../../upload';\n// utils\nimport { fData } from '../../../utils/formatNumber';\n//\nimport countries from '../user/countries';\n\n// ----------------------------------------------------------------------\n\nexport default function AccountGeneral() {\n  const isMountedRef = useIsMountedRef();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user, updateProfile } = useAuth();\n\n  const UpdateUserSchema = Yup.object().shape({\n    displayName: Yup.string().required('Name is required')\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      displayName: user.displayName || '',\n      email: `demo@hireus.com`,\n      photoURL: user.photoURL,\n      phoneNumber: user.phoneNumber,\n      country: user.country,\n      address: user.address,\n      state: user.state,\n      city: `Delhi`,\n      CGPA: 9.27,\n      about: user.about,\n      isPublic: user.isPublic\n    },\n\n    validationSchema: UpdateUserSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        await updateProfile({ ...values });\n        enqueueSnackbar('Update success', { variant: 'success' });\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.code });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  const { values, errors, touched, isSubmitting, handleSubmit, getFieldProps, setFieldValue } = formik;\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('photoURL', {\n          ...file,\n          preview: URL.createObjectURL(file)\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card sx={{ py: 10, px: 3, textAlign: 'center' }}>\n              <UploadAvatar\n                accept=\"image/*\"\n                file={values.photoURL}\n                maxSize={3145728}\n                onDrop={handleDrop}\n                error={Boolean(touched.photoURL && errors.photoURL)}\n                caption={\n                  <Typography\n                    variant=\"caption\"\n                    sx={{\n                      mt: 2,\n                      mx: 'auto',\n                      display: 'block',\n                      textAlign: 'center',\n                      color: 'text.secondary'\n                    }}\n                  >\n                    Allowed *.jpeg, *.jpg, *.png, *.gif\n                    <br /> max size of {fData(3145728)}\n                  </Typography>\n                }\n              />\n\n              <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                {touched.photoURL && errors.photoURL}\n              </FormHelperText>\n\n              <FormControlLabel\n                control={<Switch {...getFieldProps('isPublic')} color=\"primary\" />}\n                labelPlacement=\"start\"\n                label=\"Public Profile\"\n                sx={{ mt: 5 }}\n              />\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={{ xs: 2, md: 3 }}>\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"Name\" {...getFieldProps('displayName')} />\n                  <TextField fullWidth disabled label=\"Email Address\" {...getFieldProps('email')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"Phone Number\" {...getFieldProps('phoneNumber')} />\n                  <TextField fullWidth label=\"Address\" {...getFieldProps('address')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Country\"\n                    placeholder=\"Country\"\n                    {...getFieldProps('country')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.country && errors.country)}\n                    helperText={touched.country && errors.country}\n                  >\n                    <option value=\"\" />\n                    {countries.map((option) => (\n                      <option key={option.code} value={option.label}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </TextField>\n                  <TextField fullWidth label=\"State/Region\" {...getFieldProps('state')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"City\" {...getFieldProps('city')} />\n                  <TextField fullWidth label=\"CGPA\" {...getFieldProps('CGPA')} />\n                </Stack>\n\n                <TextField {...getFieldProps('about')} fullWidth multiline minRows={4} maxRows={4} label=\"About\" />\n              </Stack>\n\n              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                  Save Changes\n                </LoadingButton>\n              </Box>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useSnackbar } from 'notistack5';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// material\nimport { Card, Stack, Switch, Typography, FormControlLabel } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// redux\nimport { useSelector } from '../../../redux/store';\n// utils\nimport fakeRequest from '../../../utils/fakeRequest';\n\n// ----------------------------------------------------------------------\n\nconst ACTIVITY_OPTIONS = [\n  {\n    value: 'activityComments',\n    label: 'Email me when someone comments onmy article'\n  },\n  {\n    value: 'activityAnswers',\n    label: 'Email me when someone answers on my form'\n  },\n  { value: 'activityFollows', label: 'Email me hen someone follows me' }\n];\n\nconst APPLICATION_OPTIONS = [\n  { value: 'applicationNews', label: 'News and announcements' },\n  { value: 'applicationProduct', label: 'Weekly product updates' },\n  { value: 'applicationBlog', label: 'Weekly blog digest' }\n];\n\n// ----------------------------------------------------------------------\n\nexport default function AccountNotifications() {\n  const { enqueueSnackbar } = useSnackbar();\n  const { notifications } = useSelector((state) => state.user);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      activityComments: notifications.activityComments,\n      activityAnswers: notifications.activityAnswers,\n      activityFollows: notifications.activityFollows,\n      applicationNews: notifications.applicationNews,\n      applicationProduct: notifications.applicationProduct,\n      applicationBlog: notifications.applicationBlog\n    },\n    onSubmit: async (values, { setSubmitting }) => {\n      await fakeRequest(500);\n      setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n      enqueueSnackbar('Save success', { variant: 'success' });\n    }\n  });\n\n  const { values, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={3} alignItems=\"flex-end\">\n            <Stack spacing={2} sx={{ width: 1 }}>\n              <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\n                Activity\n              </Typography>\n              <Stack spacing={1} alignItems=\"flex-start\">\n                {ACTIVITY_OPTIONS.map((activity) => (\n                  <FormControlLabel\n                    key={activity.value}\n                    control={<Switch {...getFieldProps(activity.value)} checked={values[activity.value]} />}\n                    label={activity.label}\n                    sx={{ mx: 0 }}\n                  />\n                ))}\n              </Stack>\n            </Stack>\n\n            <Stack spacing={2} sx={{ width: 1 }}>\n              <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\n                Application\n              </Typography>\n              <Stack spacing={1} alignItems=\"flex-start\">\n                {APPLICATION_OPTIONS.map((item) => (\n                  <FormControlLabel\n                    key={item.value}\n                    control={<Switch {...getFieldProps(item.value)} checked={values[item.value]} />}\n                    label={item.label}\n                    sx={{ mx: 0 }}\n                  />\n                ))}\n              </Stack>\n            </Stack>\n\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Save Changes\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Card>\n  );\n}\n","import { Icon } from '@iconify/react';\nimport { useSnackbar } from 'notistack5';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport twitterFill from '@iconify/icons-eva/twitter-fill';\nimport linkedinFill from '@iconify/icons-eva/linkedin-fill';\nimport facebookFill from '@iconify/icons-eva/facebook-fill';\nimport instagramFilled from '@iconify/icons-ant-design/instagram-filled';\n// material\nimport { Stack, Card, TextField, InputAdornment } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// redux\nimport { useSelector } from '../../../redux/store';\n// utils\nimport fakeRequest from '../../../utils/fakeRequest';\n\n// ----------------------------------------------------------------------\n\nconst SOCIAL_LINKS_OPTIONS = [\n  {\n    value: 'facebookLink',\n    icon: <Icon icon={facebookFill} height={24} />\n  },\n  {\n    value: 'instagramLink',\n    icon: <Icon icon={instagramFilled} height={24} />\n  },\n  {\n    value: 'linkedinLink',\n    icon: <Icon icon={linkedinFill} height={24} />\n  },\n  {\n    value: 'twitterLink',\n    icon: <Icon icon={twitterFill} height={24} />\n  }\n];\n\n// ----------------------------------------------------------------------\n\nexport default function AccountSocialLinks() {\n  const { enqueueSnackbar } = useSnackbar();\n  const { myProfile } = useSelector((state) => state.user);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      facebookLink: myProfile.facebookLink,\n      instagramLink: myProfile.instagramLink,\n      linkedinLink: myProfile.linkedinLink,\n      twitterLink: myProfile.twitterLink\n    },\n    onSubmit: async (values, { setSubmitting }) => {\n      await fakeRequest(500);\n      setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n      enqueueSnackbar('Save success', { variant: 'success' });\n    }\n  });\n\n  const { handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={3} alignItems=\"flex-end\">\n            {SOCIAL_LINKS_OPTIONS.map((link) => (\n              <TextField\n                key={link.value}\n                fullWidth\n                {...getFieldProps(link.value)}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">{link.icon}</InputAdornment>\n                }}\n              />\n            ))}\n\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Save Changes\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Card>\n  );\n}\n","import { Icon } from '@iconify/react';\nimport { capitalCase } from 'change-case';\nimport { useState, useEffect } from 'react';\nimport bellFill from '@iconify/icons-eva/bell-fill';\nimport shareFill from '@iconify/icons-eva/share-fill';\nimport roundVpnKey from '@iconify/icons-ic/round-vpn-key';\nimport roundReceipt from '@iconify/icons-ic/round-receipt';\nimport roundAccountBox from '@iconify/icons-ic/round-account-box';\n// material\nimport { Container, Tab, Box, Tabs, Stack } from '@material-ui/core';\n// redux\nimport { useDispatch } from '../../redux/store';\nimport { getCards, getProfile, getInvoices, getAddressBook, getNotifications } from '../../redux/slices/user';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// hooks\nimport useSettings from '../../hooks/useSettings';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport {\n  AccountGeneral,\n  AccountBilling,\n  AccountSocialLinks,\n  AccountNotifications,\n  AccountChangePassword\n} from '../../components/_dashboard/jobprofile';\n\n// ----------------------------------------------------------------------\n\nexport default function UserAccount() {\n  const { themeStretch } = useSettings();\n  const [currentTab, setCurrentTab] = useState('general');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCards());\n    dispatch(getAddressBook());\n    dispatch(getInvoices());\n    dispatch(getNotifications());\n    dispatch(getProfile());\n  }, [dispatch]);\n\n  const ACCOUNT_TABS = [\n    {\n      value: 'general',\n      icon: <Icon icon={roundAccountBox} width={20} height={20} />,\n      component: <AccountGeneral />\n    },\n    {\n      value: 'billing',\n      icon: <Icon icon={roundReceipt} width={20} height={20} />,\n      component: <AccountBilling />\n    },\n    {\n      value: 'notifications',\n      icon: <Icon icon={bellFill} width={20} height={20} />,\n      component: <AccountNotifications />\n    },\n    {\n      value: 'social_links',\n      icon: <Icon icon={shareFill} width={20} height={20} />,\n      component: <AccountSocialLinks />\n    },\n    {\n      value: 'change_password',\n      icon: <Icon icon={roundVpnKey} width={20} height={20} />,\n      component: <AccountChangePassword />\n    }\n  ];\n\n  const handleChangeTab = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  return (\n    <Page title=\"User: Account Settings | expaverse-UI\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Job Profile\"\n          links={[\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\n            { name: 'Job List', href: PATH_DASHBOARD.user.jobList },\n            { name: 'Job Profile' }\n          ]}\n        />\n\n        <Stack spacing={5}>\n          <Tabs\n            value={currentTab}\n            scrollButtons=\"auto\"\n            variant=\"scrollable\"\n            allowScrollButtonsMobile\n            onChange={handleChangeTab}\n          >\n            {ACCOUNT_TABS.map((tab) => (\n              <Tab disableRipple key={tab.value} label={capitalCase(tab.value)} icon={tab.icon} value={tab.value} />\n            ))}\n          </Tabs>\n\n          {ACCOUNT_TABS.map((tab) => {\n            const isMatched = tab.value === currentTab;\n            return isMatched && <Box key={tab.value}>{tab.component}</Box>;\n          })}\n        </Stack>\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}