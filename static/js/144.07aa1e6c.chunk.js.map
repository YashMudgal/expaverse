{"version":3,"sources":["components/_dashboard/user/account/AccountGeneral.js","components/_dashboard/user/account/AccountSocialLinks.js","pages/dashboard/UserAccount.js"],"names":["AccountGeneral","isMountedRef","useIsMountedRef","enqueueSnackbar","useSnackbar","useAuth","user","updateProfile","UpdateUserSchema","Yup","shape","displayName","required","formik","useFormik","enableReinitialize","initialValues","email","photoURL","phoneNumber","country","address","state","city","CGPA","about","isPublic","validationSchema","onSubmit","values","a","setErrors","setSubmitting","variant","current","afterSubmit","code","errors","touched","isSubmitting","handleSubmit","getFieldProps","setFieldValue","handleDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","value","autoComplete","noValidate","Grid","container","spacing","item","xs","md","Card","sx","py","px","textAlign","accept","maxSize","onDrop","error","Boolean","caption","Typography","mt","mx","display","color","fData","FormHelperText","FormControlLabel","control","Switch","labelPlacement","label","p","Stack","direction","TextField","fullWidth","disabled","select","placeholder","SelectProps","native","helperText","countries","map","option","multiline","minRows","maxRows","Box","justifyContent","LoadingButton","type","loading","facebookFill","instagramFilled","linkedinFill","twitterFill","UserAccount","themeStretch","useSettings","useState","currentTab","setCurrentTab","dispatch","useDispatch","useEffect","getCards","getAddressBook","getInvoices","getNotifications","getProfile","ACCOUNT_TABS","icon","roundAccountBox","width","height","component","roundReceipt","bellFill","shareFill","roundVpnKey","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","name","href","PATH_DASHBOARD","root","Tabs","scrollButtons","allowScrollButtonsMobile","onChange","event","newValue","tab","Tab","disableRipple","capitalCase"],"mappings":"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","file":"static/js/144.07aa1e6c.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack5';\nimport { useCallback } from 'react';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport {\n  Box,\n  Grid,\n  Card,\n  Stack,\n  Switch,\n  TextField,\n  FormControlLabel,\n  Typography,\n  FormHelperText\n} from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// hooks\nimport useAuth from '../../../../hooks/useAuth';\nimport useIsMountedRef from '../../../../hooks/useIsMountedRef';\nimport { UploadAvatar } from '../../../upload';\n// utils\nimport { fData } from '../../../../utils/formatNumber';\n//\nimport countries from '../countries';\n\n// ----------------------------------------------------------------------\n\nexport default function AccountGeneral() {\n  const isMountedRef = useIsMountedRef();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user, updateProfile } = useAuth();\n\n  const UpdateUserSchema = Yup.object().shape({\n    displayName: Yup.string().required('Name is required')\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      displayName: user.displayName || '',\n      email: `demo@hireus.com`,\n      photoURL: user.photoURL,\n      phoneNumber: user.phoneNumber,\n      country: user.country,\n      address: user.address,\n      state: user.state,\n      city: `Delhi`,\n      CGPA: 9.27,\n      about: user.about,\n      isPublic: user.isPublic\n    },\n\n    validationSchema: UpdateUserSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        await updateProfile({ ...values });\n        enqueueSnackbar('Update success', { variant: 'success' });\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.code });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  const { values, errors, touched, isSubmitting, handleSubmit, getFieldProps, setFieldValue } = formik;\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('photoURL', {\n          ...file,\n          preview: URL.createObjectURL(file)\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card sx={{ py: 10, px: 3, textAlign: 'center' }}>\n              <UploadAvatar\n                accept=\"image/*\"\n                file={values.photoURL}\n                maxSize={3145728}\n                onDrop={handleDrop}\n                error={Boolean(touched.photoURL && errors.photoURL)}\n                caption={\n                  <Typography\n                    variant=\"caption\"\n                    sx={{\n                      mt: 2,\n                      mx: 'auto',\n                      display: 'block',\n                      textAlign: 'center',\n                      color: 'text.secondary'\n                    }}\n                  >\n                    Allowed *.jpeg, *.jpg, *.png, *.gif\n                    <br /> max size of {fData(3145728)}\n                  </Typography>\n                }\n              />\n\n              <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                {touched.photoURL && errors.photoURL}\n              </FormHelperText>\n\n              <FormControlLabel\n                control={<Switch {...getFieldProps('isPublic')} color=\"primary\" />}\n                labelPlacement=\"start\"\n                label=\"Public Profile\"\n                sx={{ mt: 5 }}\n              />\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={{ xs: 2, md: 3 }}>\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"Name\" {...getFieldProps('displayName')} />\n                  <TextField fullWidth disabled label=\"Email Address\" {...getFieldProps('email')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"Phone Number\" {...getFieldProps('phoneNumber')} />\n                  <TextField fullWidth label=\"Address\" {...getFieldProps('address')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Country\"\n                    placeholder=\"Country\"\n                    {...getFieldProps('country')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.country && errors.country)}\n                    helperText={touched.country && errors.country}\n                  >\n                    <option value=\"\" />\n                    {countries.map((option) => (\n                      <option key={option.code} value={option.label}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </TextField>\n                  <TextField fullWidth label=\"State/Region\" {...getFieldProps('state')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"City\" {...getFieldProps('city')} />\n                  <TextField fullWidth label=\"CGPA\" {...getFieldProps('CGPA')} />\n                </Stack>\n\n                <TextField {...getFieldProps('about')} fullWidth multiline minRows={4} maxRows={4} label=\"About\" />\n              </Stack>\n\n              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                  Save Changes\n                </LoadingButton>\n              </Box>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n      <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n        Generate Resume\n      </LoadingButton>\n    </FormikProvider>\n  );\n}\n","import { Icon } from '@iconify/react';\nimport { useSnackbar } from 'notistack5';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport twitterFill from '@iconify/icons-eva/twitter-fill';\nimport linkedinFill from '@iconify/icons-eva/linkedin-fill';\nimport facebookFill from '@iconify/icons-eva/facebook-fill';\nimport instagramFilled from '@iconify/icons-ant-design/instagram-filled';\n// material\nimport { Stack, Card, TextField, InputAdornment } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// redux\nimport { useSelector } from '../../../../redux/store';\n// utils\nimport fakeRequest from '../../../../utils/fakeRequest';\n\n// ----------------------------------------------------------------------\n\nconst SOCIAL_LINKS_OPTIONS = [\n  {\n    value: 'facebookLink',\n    icon: <Icon icon={facebookFill} height={24} />\n  },\n  {\n    value: 'instagramLink',\n    icon: <Icon icon={instagramFilled} height={24} />\n  },\n  {\n    value: 'linkedinLink',\n    icon: <Icon icon={linkedinFill} height={24} />\n  },\n  {\n    value: 'twitterLink',\n    icon: <Icon icon={twitterFill} height={24} />\n  }\n];\n\n// ----------------------------------------------------------------------\n\nexport default function AccountSocialLinks() {\n  const { enqueueSnackbar } = useSnackbar();\n  const { myProfile } = useSelector((state) => state.user);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      facebookLink: myProfile.facebookLink,\n      instagramLink: myProfile.instagramLink,\n      linkedinLink: myProfile.linkedinLink,\n      twitterLink: myProfile.twitterLink\n    },\n    onSubmit: async (values, { setSubmitting }) => {\n      await fakeRequest(500);\n      setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n      enqueueSnackbar('Save success', { variant: 'success' });\n    }\n  });\n\n  const { handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={3} alignItems=\"flex-end\">\n            {SOCIAL_LINKS_OPTIONS.map((link) => (\n              <TextField\n                key={link.value}\n                fullWidth\n                {...getFieldProps(link.value)}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">{link.icon}</InputAdornment>\n                }}\n              />\n            ))}\n\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Save Changes\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Card>\n  );\n}\n","import { Icon } from '@iconify/react';\nimport { capitalCase } from 'change-case';\nimport { useState, useEffect } from 'react';\nimport bellFill from '@iconify/icons-eva/bell-fill';\nimport shareFill from '@iconify/icons-eva/share-fill';\nimport roundVpnKey from '@iconify/icons-ic/round-vpn-key';\nimport roundReceipt from '@iconify/icons-ic/round-receipt';\nimport roundAccountBox from '@iconify/icons-ic/round-account-box';\n// material\nimport { Container, Tab, Box, Tabs, Stack } from '@material-ui/core';\n// redux\nimport { useDispatch } from '../../redux/store';\nimport { getCards, getProfile, getInvoices, getAddressBook, getNotifications } from '../../redux/slices/user';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// hooks\nimport useSettings from '../../hooks/useSettings';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport {\n  AccountGeneral,\n  AccountBilling,\n  AccountSocialLinks,\n  AccountNotifications,\n  AccountChangePassword\n} from '../../components/_dashboard/user/account';\n\n// ----------------------------------------------------------------------\n\nexport default function UserAccount() {\n  const { themeStretch } = useSettings();\n  const [currentTab, setCurrentTab] = useState('general');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCards());\n    dispatch(getAddressBook());\n    dispatch(getInvoices());\n    dispatch(getNotifications());\n    dispatch(getProfile());\n  }, [dispatch]);\n\n  const ACCOUNT_TABS = [\n    {\n      value: 'general',\n      icon: <Icon icon={roundAccountBox} width={20} height={20} />,\n      component: <AccountGeneral />\n    },\n    {\n      value: 'Education',\n      icon: <Icon icon={roundReceipt} width={20} height={20} />,\n      component: <AccountGeneral /> // <AccountBilling />\n    },\n    {\n      value: 'Skills',\n      icon: <Icon icon={bellFill} width={20} height={20} />,\n      component: <AccountGeneral /> // <AccountNotifications />\n    },\n    {\n      value: 'Projects',\n      icon: <Icon icon={shareFill} width={20} height={20} />,\n      component: <AccountGeneral /> // <AccountSocialLinks />\n    },\n    {\n      value: 'Experience',\n      icon: <Icon icon={roundVpnKey} width={20} height={20} />,\n      component: <AccountGeneral /> // <AccountChangePassword />\n    }\n  ];\n\n  const handleChangeTab = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  return (\n    <Page title=\"User: Account Settings | expaverse-UI\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Account\"\n          links={[\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\n            { name: 'User', href: PATH_DASHBOARD.user.root },\n            { name: 'Account Settings' }\n          ]}\n        />\n\n        <Stack spacing={5}>\n          <Tabs\n            value={currentTab}\n            scrollButtons=\"auto\"\n            variant=\"scrollable\"\n            allowScrollButtonsMobile\n            onChange={handleChangeTab}\n          >\n            {ACCOUNT_TABS.map((tab) => (\n              <Tab disableRipple key={tab.value} label={capitalCase(tab.value)} icon={tab.icon} value={tab.value} />\n            ))}\n          </Tabs>\n\n          {ACCOUNT_TABS.map((tab) => {\n            const isMatched = tab.value === currentTab;\n            return isMatched && <Box key={tab.value}>{tab.component}</Box>;\n          })}\n        </Stack>\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}