{"version":3,"sources":["components/HeaderBreadcrumbs.js","utils/formatNumber.js","pages/dashboard/JobList.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","fCurrency","number","numeral","format","Number","isInteger","fPercent","fNumber","fShortenNumber","replace","fData","columns","field","hide","headerName","flex","renderCell","params","getEmail","getValue","id","textDecoration","type","width","align","headerAlign","toDateString","valueOptions","getStatus","isLight","useTheme","palette","mode","color","textTransform","mx","RenderStatus","value","direction","px","height","rows","Array","_","index","mockData","company","location","address","country","lastDate","time","sample","CTCStipend","percent","rating","status","CustomPagination","useGridSlotComponentProps","state","apiRef","count","pagination","pageCount","page","onChange","event","current","setPage","RatingInputValue","item","applyValue","p","size","precision","placeholder","newValue","DataGridCustom","length","ratingColumn","find","column","ratingColIndex","findIndex","col","ratingFilterOperators","getGridNumericColumnOperators","operator","InputComponent","filterOperators","disableSelectionOnClick","pageSize","components","Toolbar","GridToolbar","Pagination","JobList","themeStretch","useSettings","title","maxWidth","name","PATH_DASHBOARD","root","user"],"mappings":"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","file":"static/js/115.7c960dc6.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@material-ui/core';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { replace } from 'lodash';\nimport numeral from 'numeral';\n\n// ----------------------------------------------------------------------\n\nexport function fCurrency(number) {\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\n}\n\nexport function fPercent(number) {\n  return numeral(number / 100).format('0.0%');\n}\n\nexport function fNumber(number) {\n  return numeral(number).format();\n}\n\nexport function fShortenNumber(number) {\n  return replace(numeral(number).format('0.00a'), '.00', '');\n}\n\nexport function fData(number) {\n  return numeral(number).format('0.0 b');\n}\n","import PropTypes from 'prop-types';\nimport { sample } from 'lodash';\nimport { Icon } from '@iconify/react';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport checkmarkCircle2Fill from '@iconify/icons-eva/checkmark-circle-2-fill';\n// material\nimport { useTheme } from '@material-ui/core/styles';\nimport {\n  Stack,\n  Typography,\n  Box,\n  Rating,\n  Pagination,\n  LinearProgress,\n  Container,\n  Card,\n  CardHeader\n} from '@material-ui/core';\nimport {\n  DataGrid,\n  GridToolbar,\n  useGridSlotComponentProps,\n  getGridNumericColumnOperators\n} from '@material-ui/data-grid';\n// utils\nimport createAvatar from '../../utils/createAvatar';\nimport { fPercent } from '../../utils/formatNumber';\nimport mockData from '../../utils/mock-data';\n// components\nimport Label from '../../components/Label';\nimport { MIconButton, MAvatar } from '../../components/@material-extend';\nimport Page from '../../components/Page';\nimport { PATH_DASHBOARD } from '../../routes/paths';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport useSettings from '../../hooks/useSettings';\n\n// ----------------------------------------------------------------------\n\nfunction RenderStatus(getStatus) {\n  const theme = useTheme();\n  const isLight = theme.palette.mode === 'light';\n  return (\n    <Label\n      variant={isLight ? 'ghost' : 'filled'}\n      color={\n        (getStatus === ('Not Eligible' || 'Rejected' || 'Declined') && 'error') ||\n        (getStatus === ('Shortlisted' || 'Eligible') && 'warning') ||\n        'success'\n      }\n      sx={{ textTransform: 'capitalize', mx: 'auto' }}\n    >\n      {getStatus}\n    </Label>\n  ); // 'Not Eligible', 'Rejected', 'Declined', 'Shortlisted', 'Eligible', 'Applied'\n}\n\nconst columns = [\n  // OPTIONS\n  // https://material-ui.com/api/data-grid/grid-col-def/#main-content\n  // - hide: false (default)\n  // - editable: false (default)\n  // - filterable: true (default)\n  // - sortable: true (default)\n  // - disableColumnMenu: false (default)\n\n  // FIELD TYPES\n  // --------------------\n  // 'string' (default)\n  // 'number'\n  // 'date'\n  // 'dateTime'\n  // 'boolean'\n  // 'singleSelect'\n\n  {\n    field: 'id',\n    hide: true\n  },\n  /* {\n    field: 'avatar',\n    headerName: 'Avatar',\n    width: 64,\n    sortable: false,\n    filterable: false,\n    disableColumnMenu: true,\n    align: 'center',\n    renderCell: (params) => {\n      const getAvatar = params.getValue(params.id, 'Company');\n      return (\n        <MAvatar color={createAvatar(getAvatar).color} sx={{ width: 36, height: 36 }}>\n          {createAvatar(getAvatar).name}\n        </MAvatar>\n      );\n    }\n  }, */\n  {\n    field: 'company',\n    headerName: 'Company',\n    flex: 1\n  },\n  {\n    field: 'location',\n    headerName: 'Location',\n    flex: 1,\n    renderCell: (params) => {\n      const getEmail = params.getValue(params.id, 'location');\n      return (\n        <Typography variant=\"body2\" sx={{ textDecoration: 'underline' }} noWrap>\n          {getEmail}\n        </Typography>\n      );\n    }\n  },\n  {\n    field: 'lastDate',\n    type: 'string',\n    headerName: 'Last Date',\n    width: 200,\n    align: 'right',\n    headerAlign: 'right',\n    renderCell: (params) => {\n      const getDate = params.getValue(params.id, 'lastDate');\n      return getDate.toDateString();\n    }\n  },\n  {\n    field: 'type',\n    type: 'singleSelect',\n    headerName: 'Type',\n    width: 120,\n    valueOptions: ['Internship', 'FTE', 'Internship + FTE'],\n    renderCell: (params) => {\n      const getType = params.getValue(params.id, 'type');\n      return getType;\n    }\n  },\n  {\n    field: 'status',\n    type: 'singleSelect',\n    headerName: 'Status',\n    width: 180,\n    valueOptions: ['Not Eligible', 'Rejected', 'Declined', 'Shortlisted', 'Eligible', 'Applied'],\n    renderCell: (params) => {\n      const getStatus = params.getValue(params.id, 'status');\n      return RenderStatus(getStatus);\n    }\n  },\n  {\n    field: 'CTCStipend',\n    type: 'number',\n    headerName: 'CTC/Stipend',\n    width: 260,\n    renderCell: (params) => {\n      const value = params.getValue(params.id, 'CTCStipend');\n      return (\n        <Stack direction=\"row\" alignItems=\"center\" sx={{ px: 2, width: 1, height: 1 }}>\n          <LinearProgress\n            value={value}\n            variant=\"determinate\"\n            color={(value < 30 && 'error') || (value > 30 && value < 70 && 'warning') || 'primary'}\n            sx={{ width: 1, height: 6 }}\n          />\n          <Typography variant=\"caption\" sx={{ width: 90 }}>\n            {`${value} LPA`}\n          </Typography>\n        </Stack>\n      );\n    }\n  } /* ,\n  {\n    field: 'action',\n    headerName: ' ',\n    width: 80,\n    align: 'right',\n    sortable: false,\n    filterable: false,\n    disableColumnMenu: true,\n    renderCell: (params) => {\n      const selectedID = params.row.id;\n\n      const handleClick = () => {\n        console.log('selectedID', selectedID);\n      };\n\n      return (\n        <MIconButton onClick={handleClick}>\n          <Box component={Icon} icon={moreVerticalFill} sx={{ width: 20, height: 20 }} />\n        </MIconButton>\n      );\n    }\n  } */\n];\n\nconst rows = [...Array(36)].map((_, index) => ({\n  id: mockData.id(index),\n  company: mockData.company(index),\n  location: mockData.address.country(index),\n  lastDate: mockData.time(index),\n  type: sample(['Internship', 'FTE', 'Internship + FTE']),\n  CTCStipend: mockData.number.percent(index),\n  rating: mockData.number.rating(index),\n  status: sample(['Not Eligible', 'Rejected', 'Declined', 'Shortlisted', 'Eligible', 'Applied'])\n}));\n\n// ----------------------------------------------------------------------\n\nfunction CustomPagination() {\n  const { state, apiRef } = useGridSlotComponentProps();\n\n  return (\n    <Pagination\n      color=\"primary\"\n      count={state.pagination.pageCount}\n      page={state.pagination.page + 1}\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\n    />\n  );\n}\n\nRatingInputValue.propTypes = {\n  applyValue: PropTypes.func.isRequired,\n  item: PropTypes.shape({\n    columnField: PropTypes.string,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired\n};\n\nfunction RatingInputValue({ item, applyValue }) {\n  return (\n    <Box sx={{ p: 1, height: 1, alignItems: 'flex-end', display: 'flex' }}>\n      <Rating\n        size=\"small\"\n        precision={0.5}\n        placeholder=\"Filter value\"\n        value={Number(item.value)}\n        onChange={(event, newValue) => {\n          applyValue({ ...item, value: newValue });\n        }}\n      />\n    </Box>\n  );\n}\n\nfunction DataGridCustom() {\n  if (columns.length > 0) {\n    const ratingColumn = columns.find((column) => column.field === 'rating');\n    const ratingColIndex = columns.findIndex((col) => col.field === 'rating');\n\n    const ratingFilterOperators = getGridNumericColumnOperators().map((operator) => ({\n      ...operator,\n      InputComponent: RatingInputValue\n    }));\n\n    columns[ratingColIndex] = {\n      ...ratingColumn,\n      filterOperators: ratingFilterOperators\n    };\n  }\n\n  return (\n    <DataGrid\n      // checkboxSelection\n      disableSelectionOnClick\n      rows={rows}\n      columns={columns}\n      pagination\n      pageSize={10}\n      components={{\n        Toolbar: GridToolbar,\n        Pagination: CustomPagination\n      }}\n    />\n  );\n}\n\nexport default function JobList() {\n  const { themeStretch } = useSettings();\n  return (\n    <Page title=\"Job List | expaverse-UI\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Job List\"\n          links={[\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\n            { name: 'User', href: PATH_DASHBOARD.user.root },\n            { name: 'List' }\n          ]}\n        />\n        <Card>\n          <CardHeader title=\"Jobs\" sx={{ mb: 2 }} />\n          <Box sx={{ height: 720 }}>\n            <DataGridCustom />\n          </Box>\n        </Card>\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}